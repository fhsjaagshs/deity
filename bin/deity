#!/usr/bin/env python

import deity.functionality
from deity.ipc import IPCServer
from argparse import ArgumentParser
from thread import start_new_thread

main_parser = ArgumentParser(description="Control a Linux desktop without a DE.")
subparsers = main_parser.add_subparsers(title="commands", dest="command")

screenshot_parser = subparsers.add_parser("screenshot", help="take a screenshot")
screenshot_parser.add_argument("--destination", help="Where to save the screenshot", default=None, type=str)

audio_parser = subparsers.add_parser("audio", help="control audio")
audio_parser.add_argument("--adjust-volume", metavar="INTEGER", help="Adjust audo volume", type=int)
audio_parser.add_argument("--toggle-mute", help="Toggle audo mute", action="store_true")
audio_parser.add_argument("--output", metavar="INTEGER", help="Set the active audio sink", type=int)
audio_parser.add_argument("--input", metavar="INTEGER", help="Set the active audio source", type=int)
audio_parser.add_argument("--list-outputs", help="Print a listing of sinks", action='store_true')
audio_parser.add_argument("--sanitize", help="Ensure all sources of audio use the default sink", action='store_true')

brightness_parser = subparsers.add_parser("brightness", help="control brightness")
brightness_parser.add_argument("--backlight", metavar="NAME", help="The name of your backlight in /sys/class/<SYSCLASS>")
brightness_parser.add_argument("--backlight-class", metavar="SYSCLASS", help="The class of your backlight in /sys/class/")
brightness_parser.add_argument("--adjust", metavar="INTEGER", help="Adjust the brightness by INTEGER", type=int)
brightness_parser.add_argument("--set", metavar="INTEGER", help="Set the brightness to INTEGER", type=int)

i3bar_parser = subparsers.add_parser("i3bar", help="i3bar-compliant status bar daemon")
i3bar_parser.add_argument("--date-format", metavar="FORMAT", help="Display a strftime in the statusbar using FORMAT")
i3bar_parser.add_argument("--refresh-interval", metavar="FLOAT", help="Set the refresh interval", type=float)
i3bar_parser.add_argument("--color-positive", metavar="HEXCOLOR", help="Default text color")
i3bar_parser.add_argument("--color-negative", metavar="HEXCOLOR", help="Text color used to indicate a negative condition")
i3bar_parser.add_argument("--color-neutral", metavar="HEXCOLOR", help="Text color used to indicate a neutral condition")
i3bar_parser.add_argument("--power-supply", metavar="POWER_SUPPLY", help="Power supply for which to report percentage")
i3bar_parser.add_argument("--wifi-iface", metavar="INTERFACE", help="Wi-Fi interface for which to report status")
i3bar_parser.add_argument("--vpn-iface", metavar="INTERFACE", help="VPN/tunnel interface for which to report status")
i3bar_parser.add_argument("--backlight", metavar="NAME", help="/sys/class/<CLASS>/<NAME>")
i3bar_parser.add_argument("--backlight-class", metavar="CLASS", help="/sys/class/<CLASS>/<NAME>")
main(main_parser.parse_args())

args = main_parser.parse_args().__dict__
command = args["command"]
del args["command"]

if command is "i3bar":
  def runipc():
    s = IPCServer("/tmp/deity.ipc.sock")
    s.start()
  start_new_thread(runipc)

Functionality(args.command).go(**{k: v for k, v in args if bool(v) and v is not None})
